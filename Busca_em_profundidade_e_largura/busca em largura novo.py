import json
import os
import webbrowser
import http.server
import socketserver
import threading
grafo = {
    (0,0,0,0,0,0,0,0,0): [(1,0,0,1,0,0,0,0,1), (0,0,0,0,0,0,1,1,1)],
    (1,0,0,1,0,0,0,0,1): [(0,0,0,0,0,0,0,0,0)],
    (0,0,0,0,0,0,1,1,1): [(0,0,0,0,0,0,0,0,0), (0,0,0,0,0,0,0,1,0)],
    (0,0,0,0,0,0,0,1,0): [(0,0,0,0,0,0,1,1,1), (0,1,0,0,0,0,1,1,1), (0,0,1,0,0,0,1,1,1), (0,0,0,0,1,0,1,1,1), (0,0,0,0,0,1,1,1,1)],
    (0,1,0,0,0,0,1,1,1): [(0,0,0,0,0,0,0,1,0), (0,1,0,0,0,0,0,0,0)],
    (0,0,1,0,0,0,1,1,1): [(0,0,0,0,0,0,0,1,0), (0,0,1,0,0,0,0,0,0)],
    (0,0,0,0,1,0,1,1,1): [(0,0,0,0,0,0,0,1,0), (0,0,0,0,1,0,0,0,0)],
    (0,0,0,0,1,0,0,0,0): [(1,0,0,1,1,0,0,0,1), (0,0,0,0,1,0,1,1,1), (0,0,0,1,1,0,0,0,1), (0,0,0,1,1,1,0,0,1)],
    (0,0,0,1,1,0,0,0,1): [(0,0,0,0,1,0,0,0,0), (0,0,0,0,0,0,0,0,0)],
    (0,0,0,0,0,1,1,1,1): [(0,0,0,0,0,0,0,1,0), (0,0,0,0,0,1,0,0,0)],
    (0,1,0,0,0,0,0,0,0): [(1,1,1,0,0,0,0,0,1), (0,1,0,0,0,0,1,1,1), (1,1,0,1,0,0,0,0,1)],
    (0,0,1,0,0,0,0,0,0): [(1,1,1,0,0,0,0,0,1), (0,0,1,0,0,0,1,1,1), (1,0,0,1,1,0,0,0,1)],
    (0,0,0,0,0,1,0,0,0): [(0,0,0,1,1,1,0,0,1), (0,0,0,0,0,1,1,1,1), (1,0,0,1,0,1,0,0,1)],
    (1,1,1,0,0,0,0,0,1): [(0,0,1,0,0,0,0,0,0), (0,1,0,0,0,0,0,0,0), (0,1,1,0,0,0,0,0,0)],
    (1,1,0,1,0,0,0,0,1): [(0,1,0,0,0,0,0,0,0)],
    (1,0,1,1,0,0,0,0,1): [(0,0,1,0,0,0,0,0,0)],
    (0,0,0,1,1,1,0,0,1): [(0,0,0,0,1,1,0,0,0), (0,0,0,0,0,1,0,0,0), (0,0,0,0,1,0,0,0,0)],
    (1,0,0,1,1,0,0,0,1): [(0,0,0,0,1,0,0,0,0)],
    (1,0,0,1,0,1,0,0,1): [(0,0,0,0,0,1,0,0,0)],
    (0,1,1,0,0,0,0,0,0): [(1,1,1,0,0,0,0,0,1), (1,1,1,1,0,0,0,0,1), (0,1,1,0,0,0,1,1,1)],
    (0,0,0,0,1,1,0,0,0): [(0,0,0,1,1,1,0,0,1), (1,0,0,1,1,1,0,0,1), (0,0,0,0,1,1,1,1,1)],
    (1,1,1,1,0,0,0,0,1): [(1,1,1,0,0,0,0,0,0), (0,1,1,0,0,0,0,0,0)],
    (0,1,1,0,0,0,1,1,1): [(0,1,1,0,0,0,0,0,0)],
    (1,0,0,1,1,1,0,0,1): [(0,0,0,1,1,1,0,0,0), (0,0,0,0,1,1,0,0,0)],
    (0,0,0,0,1,1,1,1,1): [(0,0,0,0,1,1,0,0,0)],
    (1,1,1,0,0,0,0,0,0): [(1,1,1,1,1,0,0,0,1), (1,1,1,1,0,1,0,0,1), (1,1,1,1,0,0,0,0,1), (1,1,1,0,0,0,1,1,1)],
    (0,0,0,1,1,1,0,0,0): [(1,1,0,1,1,1,0,0,1), (1,0,1,1,1,1,0,0,1), (1,0,0,1,1,1,0,0,1), (0,0,0,1,1,1,1,1,1)],
    (1,1,1,1,1,0,0,0,1): [(0,1,1,0,1,0,0,0,0), (1,1,1,0,0,0,0,0,0)],
    (1,1,1,1,0,1,0,0,1): [(0,1,1,0,0,1,0,0,0), (1,1,1,0,0,0,0,0,0)],
    (1,1,1,0,0,0,1,1,1): [(0,1,1,0,0,0,1,1,0), (0,0,1,0,0,0,1,1,0), (0,1,0,0,0,0,1,1,0), (1,1,1,0,0,0,0,0,0)],
    (1,1,0,1,1,1,0,0,1): [(0,0,0,1,1,1,0,0,0), (0,1,0,0,1,1,0,0,0)],
    (1,0,1,1,1,1,0,0,1): [(0,0,0,1,1,1,0,0,0), (0,0,1,0,1,1,0,0,0)],
    (0,0,0,1,1,1,1,1,1): [(0,0,0,0,1,1,1,1,0), (0,0,0,0,0,1,1,1,0), (0,0,0,0,1,0,1,1,0), (0,0,0,1,1,1,0,0,0)],
    (0,1,1,0,1,0,0,0,0): [(1,1,1,1,1,0,0,0,1), (0,1,1,0,1,0,1,1,1)],
    (0,1,1,0,0,1,0,0,0): [(1,1,1,1,0,1,0,0,1), (0,1,1,0,0,1,1,1,1)],
    (0,1,1,0,0,0,1,1,0): [(1,1,1,0,0,0,1,1,1), (1,1,1,1,0,0,1,1,1)],
    (0,0,1,0,0,0,1,1,0): [(1,1,1,0,0,0,1,1,1), (1,0,1,1,0,0,1,1,1)],
    (0,1,0,0,0,0,1,1,0): [(1,1,1,0,0,0,1,1,1), (1,1,0,1,0,0,1,1,1)],
    (0,1,0,0,1,1,0,0,0): [(1,1,0,1,1,1,0,0,1), (0,1,0,0,1,1,1,1,1)],
    (0,0,1,0,1,1,0,0,0): [(1,0,1,1,1,1,0,0,1), (0,0,1,0,1,1,1,1,1)],
    (0,0,0,0,1,1,1,1,0): [(1,0,0,1,1,1,1,1,1), (0,0,0,1,1,1,1,1,1)],
    (0,0,0,0,0,1,1,1,0): [(1,0,0,1,0,1,1,1,1), (0,0,0,1,1,1,1,1,1)],
    (0,0,0,0,1,0,1,1,0): [(1,0,0,1,1,0,1,1,1), (0,0,0,1,1,1,1,1,1)],
    (0,1,1,0,1,0,1,1,1): [(0,1,1,0,1,0,0,0,0)],
    (0,1,1,0,0,1,1,1,1): [(0,1,1,0,0,1,0,0,0)],
    (1,1,1,1,0,0,1,1,1): [(0,1,1,0,0,0,1,1,0), (1,1,1,0,0,0,1,1,0), (1,1,1,1,0,0,0,0,0)],
    (1,0,1,1,0,0,1,1,1): [(0,0,1,0,0,0,1,1,0), (1,0,1,1,0,0,0,0,0)],
    (1,1,0,1,0,0,1,1,1): [(0,1,0,0,0,0,1,1,0), (1,1,0,1,0,0,0,0,0)],
    (0,1,0,0,1,1,1,1,1): [(0,1,0,0,1,1,0,0,0)],
    (0,0,1,0,1,1,1,1,1): [(0,0,1,0,1,1,0,0,0)],
    (1,0,0,1,1,1,1,1,1): [(0,0,0,1,1,1,1,1,0), (1,0,0,1,1,1,0,0,0), (0,0,0,0,1,1,1,1,1)],
    (1,0,0,1,0,1,1,1,1): [(0,0,0,0,0,1,1,1,0), (1,0,0,1,0,1,0,0,0)],
    (1,0,0,1,1,0,1,1,1): [(0,0,0,0,1,0,1,1,0), (1,0,0,1,1,0,0,0,0)],
    (1,1,1,0,0,0,1,1,0): [(1,1,1,1,0,0,1,1,1), (1,1,1,1,1,0,1,1,1), (1,1,1,1,0,1,1,1,1),],
    (1,1,1,1,0,0,0,0,0): [(1,1,1,1,0,0,1,1,1)],
    (1,0,1,1,0,0,0,0,0): [(1,0,1,1,0,0,1,1,1)],
    (1,1,0,1,0,0,0,0,0): [(1,1,0,1,0,0,1,1,1)],
    (0,0,0,1,1,1,1,1,0): [(1,0,0,1,1,1,1,1,1), (1,1,0,1,1,1,1,1,1), (1,0,1,1,1,1,1,1,1)],
    (1,0,0,1,1,1,0,0,0): [(1,0,0,1,1,1,1,1,1)],
    (1,0,0,1,0,1,0,0,0): [(1,0,0,1,0,1,1,1,1)],
    (1,0,0,1,1,0,0,0,0): [(1,0,0,1,1,0,1,1,1)],
    (1,1,1,1,1,0,1,1,1): [(1,1,1,0,0,0,1,1,0), (1,1,1,1,1,0,0,0,0)],
    (1,1,1,1,0,1,1,1,1): [(1,1,1,0,0,0,1,1,0), (1,1,1,1,0,1,0,0,0)],
    (1,1,0,1,1,1,1,1,1): [(0,0,0,1,1,1,1,1,0), (1,1,0,1,1,1,0,0,0)],
    (1,0,1,1,1,1,1,1,1): [(0,0,0,1,1,1,1,1,0), (1,0,1,1,1,1,0,0,0)],
    (1,1,1,1,1,0,0,0,0): [(1,1,1,1,1,1,1,0,1), (1,1,1,1,1,0,1,1,1)],
    (1,1,1,1,0,1,0,0,0): [(1,1,1,1,1,1,1,0,1), (1,1,1,1,0,1,1,1,1)],
    (1,1,0,1,1,1,0,0,0): [(1,1,1,1,1,1,1,0,1), (1,1,0,1,1,1,1,1,1)],
    (1,0,1,1,1,1,0,0,0): [(1,1,1,1,1,1,1,0,1), (1,0,1,1,1,1,1,1,1)],
    (1,1,1,1,1,1,1,0,1): [(1,1,1,1,1,1,0,0,0), (1,0,1,1,1,1,0,0,0), (1,1,0,1,1,1,0,0,0), (1,1,1,1,0,1,0,0,0), (1,1,1,1,1,0,0,0,0)],
    (1,1,1,1,1,1,0,0,0): [(1,1,1,1,1,1,1,0,1), (1,1,1,1,1,1,1,1,1)]
}

print("Busca em largura")

resposta = None
lista_de_caminhos_abertos = [[(0,0,0,0,0,0,0,0,0)]]#Armazena os caminhos em vez de apenas os nós
lista_de_estados_fechado = []
sucesso = False
custoCaminho = 0
custoTotal = 0

while sucesso == False and lista_de_caminhos_abertos != []:
    custoTotal += 1
    caminhoAtual = lista_de_caminhos_abertos.pop(0)#Remover o ultimo caminho da lista
    noCandidato = caminhoAtual[-1]#Pegar o último nó do caminho atual
    lista_de_estados_fechado.append(noCandidato)
    for i in grafo[noCandidato]:
        if i == (1,1,1,1,1,1,1,1,1):
            sucesso = True
            caminhoAtual.append((1,1,1,1,1,1,1,1,1))#Adicionar o nó de destino ao caminho atual+
            resposta = caminhoAtual#Armazenar o caminho encontrado
            break
        else:
            if i not in lista_de_estados_fechado:
                novoCaminho = caminhoAtual.copy()#Criar uma cópia do caminho atual
                novoCaminho.append(i)#Adicionar o novo nó ao caminho
                lista_de_caminhos_abertos.append(novoCaminho)
if sucesso == False:
    print("Não achou")
else:
    print("Caminho encontrado:")
    for i in resposta:
        print(i)
        custoCaminho += 1
    print("Custo do caminho:", custoCaminho)
    print("Custo total:", custoTotal)

    caminho_pasta = "Busca_em_profundidade_e_largura/animacao"  
    
    if not os.path.exists(caminho_pasta):
        os.makedirs(caminho_pasta)
    
    nome_arquivo = "dados.json"
    
    caminho_arquivo = os.path.join(caminho_pasta, nome_arquivo)

    with open(caminho_arquivo, "w") as arquivo:
        json.dump(resposta, arquivo)
    
    def abrir_navegador(url):
        # Abrir o navegador no URL especificado
        webbrowser.open(url)

    def iniciar_servidor(diretorio):
        # Obter o diretório absoluto do servidor
        diretorio_absoluto = os.path.abspath(diretorio)

        # Configurar o servidor web local para servir arquivos a partir do diretório específico
        porta = 8000
        os.chdir(diretorio_absoluto)  # Mudar para o diretório de onde os arquivos serão servidos
        handler = http.server.SimpleHTTPRequestHandler

        # Desativar o bloqueio de endereço já em uso para reinicializações rápidas
        socketserver.TCPServer.allow_reuse_address = True

        # Iniciar o servidor web local
        httpd = socketserver.TCPServer(("", porta), handler)
        print(f"Servidor web iniciado em http://localhost:{porta}")
        
        # Abrir o navegador no URL especificado após iniciar o servidor
        abrir_navegador(f"http://localhost:{porta}")

        # Servir os arquivos continuamente até que o servidor seja interrompido
        httpd.serve_forever()
    diretorio_servidor = "Busca_em_profundidade_e_largura/animacao"

    # Iniciar o servidor web local em uma thread separada
    servidor_thread = threading.Thread(target=iniciar_servidor, args=(diretorio_servidor,))
    servidor_thread.start()

    # Aguardar a execução principal terminar para encerrar o servidor web
    servidor_thread.join()